digraph "classes_Harvester" {
rankdir=BT
charset="utf-8"
"pip._vendor.pyparsing.diagram.AnnotatedItem" [color="#44BB99", fontcolor="black", label=<{AnnotatedItem|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"dns.quic.AsyncQuicStream" [color="#AAAA00", fontcolor="black", label=<{AsyncQuicStream|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.tenacity.AttemptManager" [color="#44BB99", fontcolor="black", label=<{AttemptManager|retry_state : str<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"bson.BSON" [color="#EEDD88", fontcolor="black", label=<{BSON|<br ALIGN="LEFT"/>|decode(codec_options: CodecOptions[Any]): dict[str, Any]<br ALIGN="LEFT"/>encode(document: Mapping[str, Any], check_keys: bool, codec_options: CodecOptions[Any]): BSON<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._internal.metadata.Backend" [color="#99DDFF", fontcolor="black", label=<{Backend|Distribution : Type[BaseDistribution]<br ALIGN="LEFT"/>Environment : Type[BaseEnvironment]<br ALIGN="LEFT"/>NAME : str<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.tenacity.BaseAction" [color="#44BB99", fontcolor="black", label=<{BaseAction|NAME : Optional[t.Optional[str]]<br ALIGN="LEFT"/>REPR_FIELDS : t.Sequence[str]<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.tenacity.BaseRetrying" [color="#44BB99", fontcolor="black", label=<{BaseRetrying|after : t.Callable[['RetryCallState'], None]<br ALIGN="LEFT"/>before : t.Callable[['RetryCallState'], None]<br ALIGN="LEFT"/>before_sleep : Optional[t.Optional[t.Callable[['RetryCallState'], None]]]<br ALIGN="LEFT"/>reraise : bool<br ALIGN="LEFT"/>retry : str<br ALIGN="LEFT"/>retry_error_callback : Optional[t.Optional[t.Callable[['RetryCallState'], t.Any]]]<br ALIGN="LEFT"/>retry_error_cls : t.Type[RetryError]<br ALIGN="LEFT"/>sleep : t.Callable[[t.Union[int, float]], None]<br ALIGN="LEFT"/>statistics<br ALIGN="LEFT"/>stop : str<br ALIGN="LEFT"/>wait : str<br ALIGN="LEFT"/>|begin(): None<br ALIGN="LEFT"/>copy(sleep: t.Union[t.Callable[[t.Union[int, float]], None], object], stop: t.Union['StopBaseT', object], wait: t.Union['WaitBaseT', object], retry: t.Union[retry_base, object], before: t.Union[t.Callable[['RetryCallState'], None], object], after: t.Union[t.Callable[['RetryCallState'], None], object], before_sleep: t.Union[t.Optional[t.Callable[['RetryCallState'], None]], object], reraise: t.Union[bool, object], retry_error_cls: t.Union[t.Type[RetryError], object], retry_error_callback: t.Union[t.Optional[t.Callable[['RetryCallState'], t.Any]], object]): 'BaseRetrying'<br ALIGN="LEFT"/>iter(retry_state: 'RetryCallState'): t.Union[DoAttempt, DoSleep, t.Any]<br ALIGN="LEFT"/>wraps(f: WrappedFn): WrappedFn<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pygments.filters.CodeTagFilter" [color="#44BB99", fontcolor="black", label=<{CodeTagFilter|tag_re<br ALIGN="LEFT"/>|filter(lexer, stream)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools.Command" [color="#BBCC33", fontcolor="black", label=<{Command|command_consumes_arguments : bool<br ALIGN="LEFT"/>|ensure_string_list(option)<br ALIGN="LEFT"/>reinitialize_command(command, reinit_subcommands)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools._vendor.importlib_metadata.DistributionFinder.Context" [color="#EEDD88", fontcolor="black", label=<{Context|name : NoneType<br ALIGN="LEFT"/>path<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.ContextualVersionConflict" [color="#44BB99", fontcolor="red", label=<{ContextualVersionConflict|required_by<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources.ContextualVersionConflict" [color="#BBCC33", fontcolor="red", label=<{ContextualVersionConflict|required_by<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pyparsing.diagram.ConverterState" [color="#44BB99", fontcolor="black", label=<{ConverterState|diagram_kwargs : dict<br ALIGN="LEFT"/>diagrams : Dict[int, EditablePartial[NamedDiagram]]<br ALIGN="LEFT"/>extracted_diagram_names : Set[str]<br ALIGN="LEFT"/>index : int<br ALIGN="LEFT"/>unnamed_index : int<br ALIGN="LEFT"/>|extract_into_diagram(el_id: int)<br ALIGN="LEFT"/>generate_index(): int<br ALIGN="LEFT"/>generate_unnamed(): int<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.DefaultProvider" [color="#44BB99", fontcolor="black", label=<{DefaultProvider|<br ALIGN="LEFT"/>|get_resource_stream(manager, resource_name)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.DefaultProvider" [color="#BBCC33", fontcolor="black", label=<{DefaultProvider|<br ALIGN="LEFT"/>|get_resource_stream(manager, resource_name)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools._vendor.importlib_metadata.DeprecatedTuple" [color="#EEDD88", fontcolor="black", label=<{DeprecatedTuple|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.DistInfoDistribution" [color="#44BB99", fontcolor="black", label=<{DistInfoDistribution|EQEQ<br ALIGN="LEFT"/>PKG_INFO : str<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources.DistInfoDistribution" [color="#BBCC33", fontcolor="black", label=<{DistInfoDistribution|EQEQ<br ALIGN="LEFT"/>PKG_INFO : str<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.distlib.DistlibException" [color="#44BB99", fontcolor="red", label=<{DistlibException|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.Distribution" [color="#44BB99", fontcolor="black", label=<{Distribution|PKG_INFO : str<br ALIGN="LEFT"/>extras<br ALIGN="LEFT"/>hashcmp<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>location : NoneType<br ALIGN="LEFT"/>parsed_version<br ALIGN="LEFT"/>platform : NoneType<br ALIGN="LEFT"/>precedence : int<br ALIGN="LEFT"/>project_name<br ALIGN="LEFT"/>py_version<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|activate(path, replace)<br ALIGN="LEFT"/>as_requirement()<br ALIGN="LEFT"/>check_version_conflict()<br ALIGN="LEFT"/>clone()<br ALIGN="LEFT"/>egg_name()<br ALIGN="LEFT"/>from_filename(filename, metadata)<br ALIGN="LEFT"/>from_location(location, basename, metadata)<br ALIGN="LEFT"/>get_entry_info(group, name)<br ALIGN="LEFT"/>get_entry_map(group)<br ALIGN="LEFT"/>has_version()<br ALIGN="LEFT"/>insert_on(path, loc, replace)<br ALIGN="LEFT"/>load_entry_point(group, name)<br ALIGN="LEFT"/>requires(extras)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.Distribution" [color="#BBCC33", fontcolor="black", label=<{Distribution|PKG_INFO : str<br ALIGN="LEFT"/>extras<br ALIGN="LEFT"/>hashcmp<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>location : NoneType<br ALIGN="LEFT"/>parsed_version<br ALIGN="LEFT"/>platform : NoneType<br ALIGN="LEFT"/>precedence : int<br ALIGN="LEFT"/>project_name<br ALIGN="LEFT"/>py_version<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|activate(path, replace)<br ALIGN="LEFT"/>as_requirement()<br ALIGN="LEFT"/>check_version_conflict()<br ALIGN="LEFT"/>clone()<br ALIGN="LEFT"/>egg_name()<br ALIGN="LEFT"/>from_filename(filename, metadata)<br ALIGN="LEFT"/>from_location(location, basename, metadata)<br ALIGN="LEFT"/>get_entry_info(group, name)<br ALIGN="LEFT"/>get_entry_map(group)<br ALIGN="LEFT"/>has_version()<br ALIGN="LEFT"/>insert_on(path, loc, replace)<br ALIGN="LEFT"/>load_entry_point(group, name)<br ALIGN="LEFT"/>requires(extras)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools._vendor.importlib_metadata.Distribution" [color="#EEDD88", fontcolor="black", label=<{Distribution|entry_points<br ALIGN="LEFT"/>files<br ALIGN="LEFT"/>metadata<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>requires<br ALIGN="LEFT"/>version<br ALIGN="LEFT"/>|at(path)<br ALIGN="LEFT"/>discover()<br ALIGN="LEFT"/>from_name(name: str)<br ALIGN="LEFT"/><I>locate_file</I>(path)<br ALIGN="LEFT"/><I>read_text</I>(filename)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools._vendor.importlib_metadata.DistributionFinder" [color="#EEDD88", fontcolor="black", label=<{DistributionFinder|<br ALIGN="LEFT"/>|<I>find_distributions</I>(context)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.DistributionNotFound" [color="#44BB99", fontcolor="red", label=<{DistributionNotFound|req<br ALIGN="LEFT"/>requirers<br ALIGN="LEFT"/>requirers_str<br ALIGN="LEFT"/>|report()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.DistributionNotFound" [color="#BBCC33", fontcolor="red", label=<{DistributionNotFound|req<br ALIGN="LEFT"/>requirers<br ALIGN="LEFT"/>requirers_str<br ALIGN="LEFT"/>|report()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"_distutils_hack.DistutilsMetaFinder.spec_for_distutils.DistutilsLoader" [color="#77AADD", fontcolor="black", label=<{DistutilsLoader|<br ALIGN="LEFT"/>|create_module(spec)<br ALIGN="LEFT"/><I>exec_module</I>(module)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"_distutils_hack.DistutilsMetaFinder" [color="#77AADD", fontcolor="black", label=<{DistutilsMetaFinder|sensitive_tests : list<br ALIGN="LEFT"/>spec_for_distutils<br ALIGN="LEFT"/>|find_spec(fullname, path, target)<br ALIGN="LEFT"/>frame_file_is_setup(frame)<br ALIGN="LEFT"/>is_cpython()<br ALIGN="LEFT"/>pip_imported_during_build()<br ALIGN="LEFT"/>spec_for_distutils()<br ALIGN="LEFT"/>spec_for_pip()<br ALIGN="LEFT"/>spec_for_sensitive_tests()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.tenacity.DoAttempt" [color="#44BB99", fontcolor="black", label=<{DoAttempt|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.tenacity.DoSleep" [color="#44BB99", fontcolor="black", label=<{DoSleep|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pyparsing.diagram.EachItem" [color="#44BB99", fontcolor="black", label=<{EachItem|all_label : str<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pyparsing.diagram.EditablePartial" [color="#44BB99", fontcolor="black", label=<{EditablePartial|args : list<br ALIGN="LEFT"/>func : Callable[..., T]<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|from_call(func: Callable[..., T]): 'EditablePartial[T]'<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.EggInfoDistribution" [color="#44BB99", fontcolor="black", label=<{EggInfoDistribution|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources.EggInfoDistribution" [color="#BBCC33", fontcolor="black", label=<{EggInfoDistribution|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.EggMetadata" [color="#44BB99", fontcolor="black", label=<{EggMetadata|egg_info<br ALIGN="LEFT"/>loader<br ALIGN="LEFT"/>module_path<br ALIGN="LEFT"/>zip_pre<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources.EggMetadata" [color="#BBCC33", fontcolor="black", label=<{EggMetadata|egg_info<br ALIGN="LEFT"/>loader<br ALIGN="LEFT"/>module_path<br ALIGN="LEFT"/>zip_pre<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.EggProvider" [color="#44BB99", fontcolor="black", label=<{EggProvider|egg_info<br ALIGN="LEFT"/>egg_name<br ALIGN="LEFT"/>egg_root<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources.EggProvider" [color="#BBCC33", fontcolor="black", label=<{EggProvider|egg_info<br ALIGN="LEFT"/>egg_name<br ALIGN="LEFT"/>egg_root<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pyparsing.diagram.ElementState" [color="#44BB99", fontcolor="black", label=<{ElementState|complete : bool<br ALIGN="LEFT"/>converted<br ALIGN="LEFT"/>element : ParserElement<br ALIGN="LEFT"/>extract : bool<br ALIGN="LEFT"/>name : NoneType, Optional[typing.Optional[str]]<br ALIGN="LEFT"/>number : int<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>parent_index : Optional[typing.Optional[int]]<br ALIGN="LEFT"/>|mark_for_extraction(el_id: int, state: 'ConverterState', name: str, force: bool)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.EmptyProvider" [color="#44BB99", fontcolor="black", label=<{EmptyProvider|module_path : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources.EmptyProvider" [color="#BBCC33", fontcolor="black", label=<{EmptyProvider|module_path : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.webencodings.Encoding" [color="#44BB99", fontcolor="black", label=<{Encoding|codec_info<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.EntryPoint" [color="#44BB99", fontcolor="black", label=<{EntryPoint|attrs : tuple<br ALIGN="LEFT"/>dist : NoneType<br ALIGN="LEFT"/>extras : tuple<br ALIGN="LEFT"/>module_name<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>pattern<br ALIGN="LEFT"/>|load(require)<br ALIGN="LEFT"/>parse(src, dist)<br ALIGN="LEFT"/>parse_group(group, lines, dist)<br ALIGN="LEFT"/>parse_map(data, dist)<br ALIGN="LEFT"/>require(env, installer)<br ALIGN="LEFT"/>resolve()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.EntryPoint" [color="#BBCC33", fontcolor="black", label=<{EntryPoint|attrs : tuple<br ALIGN="LEFT"/>dist : NoneType<br ALIGN="LEFT"/>extras : tuple<br ALIGN="LEFT"/>module_name<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>pattern<br ALIGN="LEFT"/>|load(require)<br ALIGN="LEFT"/>parse(src, dist)<br ALIGN="LEFT"/>parse_group(group, lines, dist)<br ALIGN="LEFT"/>parse_map(data, dist)<br ALIGN="LEFT"/>require(env, installer)<br ALIGN="LEFT"/>resolve()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools._vendor.importlib_metadata.EntryPoint" [color="#EEDD88", fontcolor="black", label=<{EntryPoint|attr<br ALIGN="LEFT"/>dist : Optional['Distribution']<br ALIGN="LEFT"/>extras<br ALIGN="LEFT"/>group : str<br ALIGN="LEFT"/>module<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>pattern<br ALIGN="LEFT"/>value : str<br ALIGN="LEFT"/>|load()<br ALIGN="LEFT"/>matches()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools._vendor.importlib_metadata.EntryPoints" [color="#EEDD88", fontcolor="black", label=<{EntryPoints|groups<br ALIGN="LEFT"/>names<br ALIGN="LEFT"/>|select()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.Environment" [color="#44BB99", fontcolor="black", label=<{Environment|platform<br ALIGN="LEFT"/>python<br ALIGN="LEFT"/>|add(dist)<br ALIGN="LEFT"/>best_match(req, working_set, installer, replace_conflicting)<br ALIGN="LEFT"/>can_add(dist)<br ALIGN="LEFT"/>obtain(requirement, installer)<br ALIGN="LEFT"/>remove(dist)<br ALIGN="LEFT"/>scan(search_path)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.Environment" [color="#BBCC33", fontcolor="black", label=<{Environment|platform<br ALIGN="LEFT"/>python<br ALIGN="LEFT"/>|add(dist)<br ALIGN="LEFT"/>best_match(req, working_set, installer, replace_conflicting)<br ALIGN="LEFT"/>can_add(dist)<br ALIGN="LEFT"/>obtain(requirement, installer)<br ALIGN="LEFT"/>remove(dist)<br ALIGN="LEFT"/>scan(search_path)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pygments.filters.ErrorToken" [color="#44BB99", fontcolor="red", label=<{ErrorToken|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.ExtractionError" [color="#44BB99", fontcolor="red", label=<{ExtractionError|cache_path<br ALIGN="LEFT"/>manager<br ALIGN="LEFT"/>original_error<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources.ExtractionError" [color="#BBCC33", fontcolor="red", label=<{ExtractionError|cache_path<br ALIGN="LEFT"/>manager<br ALIGN="LEFT"/>original_error<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"setuptools._vendor.importlib_metadata.FastPath" [color="#EEDD88", fontcolor="black", label=<{FastPath|joinpath<br ALIGN="LEFT"/>mtime<br ALIGN="LEFT"/>root<br ALIGN="LEFT"/>|children()<br ALIGN="LEFT"/>joinpath(child)<br ALIGN="LEFT"/>lookup(mtime)<br ALIGN="LEFT"/>search(name)<br ALIGN="LEFT"/>zip_children()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools._vendor.importlib_metadata.FileHash" [color="#EEDD88", fontcolor="black", label=<{FileHash|mode<br ALIGN="LEFT"/>value<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.FileMetadata" [color="#44BB99", fontcolor="black", label=<{FileMetadata|path<br ALIGN="LEFT"/>|get_metadata(name)<br ALIGN="LEFT"/>get_metadata_lines(name)<br ALIGN="LEFT"/>has_metadata(name)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.FileMetadata" [color="#BBCC33", fontcolor="black", label=<{FileMetadata|path<br ALIGN="LEFT"/>|get_metadata(name)<br ALIGN="LEFT"/>get_metadata_lines(name)<br ALIGN="LEFT"/>has_metadata(name)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources._vendor.jaraco.text.FoldedCase" [color="#AAAA00", fontcolor="black", label=<{FoldedCase|<br ALIGN="LEFT"/>|in_(other)<br ALIGN="LEFT"/>index(sub)<br ALIGN="LEFT"/>lower()<br ALIGN="LEFT"/>split(splitter, maxsplit)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools._vendor.jaraco.text.FoldedCase" [color="#EEDD88", fontcolor="black", label=<{FoldedCase|<br ALIGN="LEFT"/>|in_(other)<br ALIGN="LEFT"/>index(sub)<br ALIGN="LEFT"/>lower()<br ALIGN="LEFT"/>split(splitter, maxsplit)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.tenacity.Future" [color="#44BB99", fontcolor="black", label=<{Future|attempt_number : int<br ALIGN="LEFT"/>failed<br ALIGN="LEFT"/>|construct(attempt_number: int, value: t.Any, has_exception: bool): 'Future'<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pygments.filters.GobbleFilter" [color="#44BB99", fontcolor="black", label=<{GobbleFilter|n : int<br ALIGN="LEFT"/>|filter(lexer, stream)<br ALIGN="LEFT"/>gobble(value, left)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"gridfs.GridFS" [color="#DDDDDD", fontcolor="black", label=<{GridFS|<br ALIGN="LEFT"/>|delete(file_id: Any, session: Optional[ClientSession]): None<br ALIGN="LEFT"/>exists(document_or_id: Optional[Any], session: Optional[ClientSession]): bool<br ALIGN="LEFT"/>find(): GridOutCursor<br ALIGN="LEFT"/>find_one(filter: Optional[Any], session: Optional[ClientSession]): Optional[GridOut]<br ALIGN="LEFT"/>get(file_id: Any, session: Optional[ClientSession]): GridOut<br ALIGN="LEFT"/>get_last_version(filename: Optional[str], session: Optional[ClientSession]): GridOut<br ALIGN="LEFT"/>get_version(filename: Optional[str], version: Optional[int], session: Optional[ClientSession]): GridOut<br ALIGN="LEFT"/>list(session: Optional[ClientSession]): list[str]<br ALIGN="LEFT"/>new_file(): GridIn<br ALIGN="LEFT"/>put(data: Any): Any<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"gridfs.GridFSBucket" [color="#DDDDDD", fontcolor="black", label=<{GridFSBucket|<br ALIGN="LEFT"/>|delete(file_id: Any, session: Optional[ClientSession]): None<br ALIGN="LEFT"/>download_to_stream(file_id: Any, destination: Any, session: Optional[ClientSession]): None<br ALIGN="LEFT"/>download_to_stream_by_name(filename: str, destination: Any, revision: int, session: Optional[ClientSession]): None<br ALIGN="LEFT"/>find(): GridOutCursor<br ALIGN="LEFT"/>open_download_stream(file_id: Any, session: Optional[ClientSession]): GridOut<br ALIGN="LEFT"/>open_download_stream_by_name(filename: str, revision: int, session: Optional[ClientSession]): GridOut<br ALIGN="LEFT"/>open_upload_stream(filename: str, chunk_size_bytes: Optional[int], metadata: Optional[Mapping[str, Any]], session: Optional[ClientSession]): GridIn<br ALIGN="LEFT"/>open_upload_stream_with_id(file_id: Any, filename: str, chunk_size_bytes: Optional[int], metadata: Optional[Mapping[str, Any]], session: Optional[ClientSession]): GridIn<br ALIGN="LEFT"/>rename(file_id: Any, new_filename: str, session: Optional[ClientSession]): None<br ALIGN="LEFT"/>upload_from_stream(filename: str, source: Any, chunk_size_bytes: Optional[int], metadata: Optional[Mapping[str, Any]], session: Optional[ClientSession]): ObjectId<br ALIGN="LEFT"/>upload_from_stream_with_id(file_id: Any, filename: str, source: Any, chunk_size_bytes: Optional[int], metadata: Optional[Mapping[str, Any]], session: Optional[ClientSession]): None<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.IMetadataProvider" [color="#44BB99", fontcolor="black", label=<{IMetadataProvider|<br ALIGN="LEFT"/>|<I>get_metadata</I>()<br ALIGN="LEFT"/><I>get_metadata_lines</I>()<br ALIGN="LEFT"/><I>has_metadata</I>()<br ALIGN="LEFT"/><I>metadata_isdir</I>()<br ALIGN="LEFT"/><I>metadata_listdir</I>()<br ALIGN="LEFT"/><I>run_script</I>(namespace)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.IMetadataProvider" [color="#BBCC33", fontcolor="black", label=<{IMetadataProvider|<br ALIGN="LEFT"/>|<I>get_metadata</I>()<br ALIGN="LEFT"/><I>get_metadata_lines</I>()<br ALIGN="LEFT"/><I>has_metadata</I>()<br ALIGN="LEFT"/><I>metadata_isdir</I>()<br ALIGN="LEFT"/><I>metadata_listdir</I>()<br ALIGN="LEFT"/><I>run_script</I>(namespace)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.IResourceProvider" [color="#44BB99", fontcolor="black", label=<{IResourceProvider|<br ALIGN="LEFT"/>|<I>get_resource_filename</I>(resource_name)<br ALIGN="LEFT"/><I>get_resource_stream</I>(resource_name)<br ALIGN="LEFT"/><I>get_resource_string</I>(resource_name)<br ALIGN="LEFT"/><I>has_resource</I>()<br ALIGN="LEFT"/><I>resource_isdir</I>()<br ALIGN="LEFT"/><I>resource_listdir</I>()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.IResourceProvider" [color="#BBCC33", fontcolor="black", label=<{IResourceProvider|<br ALIGN="LEFT"/>|<I>get_resource_filename</I>(resource_name)<br ALIGN="LEFT"/><I>get_resource_stream</I>(resource_name)<br ALIGN="LEFT"/><I>get_resource_string</I>(resource_name)<br ALIGN="LEFT"/><I>has_resource</I>()<br ALIGN="LEFT"/><I>resource_isdir</I>()<br ALIGN="LEFT"/><I>resource_listdir</I>()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.webencodings.IncrementalDecoder" [color="#44BB99", fontcolor="black", label=<{IncrementalDecoder|encoding : NoneType<br ALIGN="LEFT"/>|decode(input, final)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.webencodings.IncrementalEncoder" [color="#44BB99", fontcolor="black", label=<{IncrementalEncoder|encode<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._internal.req.InstallationResult" [color="#99DDFF", fontcolor="black", label=<{InstallationResult|name : str<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pygments.filters.KeywordCaseFilter" [color="#44BB99", fontcolor="black", label=<{KeywordCaseFilter|convert<br ALIGN="LEFT"/>|filter(lexer, stream)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools._vendor.importlib_metadata.Lookup" [color="#EEDD88", fontcolor="black", label=<{Lookup|eggs : FreezableDefaultDict<br ALIGN="LEFT"/>infos : FreezableDefaultDict<br ALIGN="LEFT"/>|search(prepared)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.MemoizedZipManifests" [color="#44BB99", fontcolor="black", label=<{MemoizedZipManifests|manifest_mod : manifest_mod<br ALIGN="LEFT"/>|load(path)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.MemoizedZipManifests" [color="#BBCC33", fontcolor="black", label=<{MemoizedZipManifests|manifest_mod : manifest_mod<br ALIGN="LEFT"/>|load(path)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools._vendor.importlib_metadata.MetadataPathFinder" [color="#EEDD88", fontcolor="black", label=<{MetadataPathFinder|<br ALIGN="LEFT"/>|find_distributions(context)<br ALIGN="LEFT"/>invalidate_caches()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools._install_setup_requires.MinimalDistribution" [color="#BBCC33", fontcolor="black", label=<{MinimalDistribution|<br ALIGN="LEFT"/>|<I>finalize_options</I>()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pygments.filters.NameHighlightFilter" [color="#44BB99", fontcolor="black", label=<{NameHighlightFilter|names : set<br ALIGN="LEFT"/>tokentype : _TokenType<br ALIGN="LEFT"/>|filter(lexer, stream)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.NoDists" [color="#44BB99", fontcolor="black", label=<{NoDists|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources.NoDists" [color="#BBCC33", fontcolor="black", label=<{NoDists|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.NullProvider" [color="#44BB99", fontcolor="black", label=<{NullProvider|egg_info : NoneType<br ALIGN="LEFT"/>egg_name : NoneType<br ALIGN="LEFT"/>loader : NoneType<br ALIGN="LEFT"/>module_path<br ALIGN="LEFT"/>|get_metadata(name)<br ALIGN="LEFT"/>get_metadata_lines(name)<br ALIGN="LEFT"/>get_resource_filename(manager, resource_name)<br ALIGN="LEFT"/>get_resource_stream(manager, resource_name)<br ALIGN="LEFT"/>get_resource_string(manager, resource_name)<br ALIGN="LEFT"/>has_metadata(name)<br ALIGN="LEFT"/>has_resource(resource_name)<br ALIGN="LEFT"/>metadata_isdir(name)<br ALIGN="LEFT"/>metadata_listdir(name)<br ALIGN="LEFT"/>resource_isdir(resource_name)<br ALIGN="LEFT"/>resource_listdir(resource_name)<br ALIGN="LEFT"/>run_script(script_name, namespace)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.NullProvider" [color="#BBCC33", fontcolor="black", label=<{NullProvider|egg_info : NoneType<br ALIGN="LEFT"/>egg_name : NoneType<br ALIGN="LEFT"/>loader : NoneType<br ALIGN="LEFT"/>module_path<br ALIGN="LEFT"/>|get_metadata(name)<br ALIGN="LEFT"/>get_metadata_lines(name)<br ALIGN="LEFT"/>get_resource_filename(manager, resource_name)<br ALIGN="LEFT"/>get_resource_stream(manager, resource_name)<br ALIGN="LEFT"/>get_resource_string(manager, resource_name)<br ALIGN="LEFT"/>has_metadata(name)<br ALIGN="LEFT"/>has_resource(resource_name)<br ALIGN="LEFT"/>metadata_isdir(name)<br ALIGN="LEFT"/>metadata_listdir(name)<br ALIGN="LEFT"/>resource_isdir(resource_name)<br ALIGN="LEFT"/>resource_listdir(resource_name)<br ALIGN="LEFT"/>run_script(script_name, namespace)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.PEP440Warning" [color="#44BB99", fontcolor="red", label=<{PEP440Warning|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources.PEP440Warning" [color="#BBCC33", fontcolor="red", label=<{PEP440Warning|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"setuptools._vendor.importlib_metadata.PackageNotFoundError" [color="#EEDD88", fontcolor="red", label=<{PackageNotFoundError|name<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"setuptools._vendor.importlib_metadata.PackagePath" [color="#EEDD88", fontcolor="black", label=<{PackagePath|dist<br ALIGN="LEFT"/>hash : NoneType<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>|locate()<br ALIGN="LEFT"/>read_binary()<br ALIGN="LEFT"/>read_text(encoding)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools._vendor.importlib_metadata.PathDistribution" [color="#EEDD88", fontcolor="black", label=<{PathDistribution|<br ALIGN="LEFT"/>|locate_file(path)<br ALIGN="LEFT"/>read_text(filename)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.PathMetadata" [color="#44BB99", fontcolor="black", label=<{PathMetadata|egg_info<br ALIGN="LEFT"/>module_path<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources.PathMetadata" [color="#BBCC33", fontcolor="black", label=<{PathMetadata|egg_info<br ALIGN="LEFT"/>module_path<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.PkgResourcesDeprecationWarning" [color="#44BB99", fontcolor="red", label=<{PkgResourcesDeprecationWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources.PkgResourcesDeprecationWarning" [color="#BBCC33", fontcolor="red", label=<{PkgResourcesDeprecationWarning|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"psutil.Popen" [color="#FFAABB", fontcolor="black", label=<{Popen|<br ALIGN="LEFT"/>|wait(timeout)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools._vendor.importlib_metadata.Prepared" [color="#EEDD88", fontcolor="black", label=<{Prepared|legacy_normalized : NoneType<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>normalized : NoneType<br ALIGN="LEFT"/>|legacy_normalize(name)<br ALIGN="LEFT"/>normalize(name)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"psutil.Process" [color="#FFAABB", fontcolor="black", label=<{Process|info : dict<br ALIGN="LEFT"/>pid<br ALIGN="LEFT"/>|as_dict(attrs, ad_value)<br ALIGN="LEFT"/>children(recursive)<br ALIGN="LEFT"/>cmdline()<br ALIGN="LEFT"/>connections(kind)<br ALIGN="LEFT"/>cpu_affinity(cpus)<br ALIGN="LEFT"/>cpu_num()<br ALIGN="LEFT"/>cpu_percent(interval)<br ALIGN="LEFT"/>cpu_times()<br ALIGN="LEFT"/>create_time()<br ALIGN="LEFT"/>cwd()<br ALIGN="LEFT"/>environ()<br ALIGN="LEFT"/>exe()<br ALIGN="LEFT"/>gids()<br ALIGN="LEFT"/>io_counters()<br ALIGN="LEFT"/>ionice(ioclass, value)<br ALIGN="LEFT"/>is_running()<br ALIGN="LEFT"/>kill()<br ALIGN="LEFT"/>memory_full_info()<br ALIGN="LEFT"/>memory_info()<br ALIGN="LEFT"/>memory_info_ex()<br ALIGN="LEFT"/>memory_maps(grouped)<br ALIGN="LEFT"/>memory_percent(memtype)<br ALIGN="LEFT"/>name()<br ALIGN="LEFT"/>nice(value)<br ALIGN="LEFT"/>num_ctx_switches()<br ALIGN="LEFT"/>num_fds()<br ALIGN="LEFT"/>num_handles()<br ALIGN="LEFT"/>num_threads()<br ALIGN="LEFT"/>oneshot()<br ALIGN="LEFT"/>open_files()<br ALIGN="LEFT"/>parent()<br ALIGN="LEFT"/>parents()<br ALIGN="LEFT"/>ppid()<br ALIGN="LEFT"/>resume()<br ALIGN="LEFT"/>rlimit(resource, limits)<br ALIGN="LEFT"/>send_signal(sig)<br ALIGN="LEFT"/>status()<br ALIGN="LEFT"/>suspend()<br ALIGN="LEFT"/>terminal()<br ALIGN="LEFT"/>terminate()<br ALIGN="LEFT"/>threads()<br ALIGN="LEFT"/>uids()<br ALIGN="LEFT"/>username()<br ALIGN="LEFT"/>wait(timeout)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"psutil.tests.PsutilTestCase" [color="#FFAABB", fontcolor="black", label=<{PsutilTestCase|<br ALIGN="LEFT"/>|assertProcessGone(proc)<br ALIGN="LEFT"/>get_testfn(suffix, dir)<br ALIGN="LEFT"/>pyrun()<br ALIGN="LEFT"/>spawn_children_pair()<br ALIGN="LEFT"/>spawn_testproc()<br ALIGN="LEFT"/>spawn_zombie()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pygments.filters.RaiseOnErrorTokenFilter" [color="#44BB99", fontcolor="black", label=<{RaiseOnErrorTokenFilter|exception<br ALIGN="LEFT"/>|filter(lexer, stream)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.Requirement" [color="#44BB99", fontcolor="black", label=<{Requirement|extras : tuple<br ALIGN="LEFT"/>hashCmp : tuple<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>project_name<br ALIGN="LEFT"/>specs<br ALIGN="LEFT"/>unsafe_name<br ALIGN="LEFT"/>|parse(s)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.Requirement" [color="#BBCC33", fontcolor="black", label=<{Requirement|extras : tuple<br ALIGN="LEFT"/>hashCmp : tuple<br ALIGN="LEFT"/>key<br ALIGN="LEFT"/>project_name<br ALIGN="LEFT"/>specs<br ALIGN="LEFT"/>unsafe_name<br ALIGN="LEFT"/>|parse(s)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.RequirementParseError" [color="#44BB99", fontcolor="red", label=<{RequirementParseError|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources.RequirementParseError" [color="#BBCC33", fontcolor="black", label=<{RequirementParseError|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.ResolutionError" [color="#44BB99", fontcolor="red", label=<{ResolutionError|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources.ResolutionError" [color="#BBCC33", fontcolor="red", label=<{ResolutionError|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.ResourceManager" [color="#44BB99", fontcolor="black", label=<{ResourceManager|cached_files : dict<br ALIGN="LEFT"/>extraction_path : NoneType<br ALIGN="LEFT"/>|<I>cleanup_resources</I>(force)<br ALIGN="LEFT"/>extraction_error()<br ALIGN="LEFT"/>get_cache_path(archive_name, names)<br ALIGN="LEFT"/>postprocess(tempname, filename)<br ALIGN="LEFT"/>resource_exists(package_or_requirement, resource_name)<br ALIGN="LEFT"/>resource_filename(package_or_requirement, resource_name)<br ALIGN="LEFT"/>resource_isdir(package_or_requirement, resource_name)<br ALIGN="LEFT"/>resource_listdir(package_or_requirement, resource_name)<br ALIGN="LEFT"/>resource_stream(package_or_requirement, resource_name)<br ALIGN="LEFT"/>resource_string(package_or_requirement, resource_name)<br ALIGN="LEFT"/>set_extraction_path(path)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.ResourceManager" [color="#BBCC33", fontcolor="black", label=<{ResourceManager|cached_files : dict<br ALIGN="LEFT"/>extraction_path : NoneType<br ALIGN="LEFT"/>|<I>cleanup_resources</I>(force)<br ALIGN="LEFT"/>extraction_error()<br ALIGN="LEFT"/>get_cache_path(archive_name, names)<br ALIGN="LEFT"/>postprocess(tempname, filename)<br ALIGN="LEFT"/>resource_exists(package_or_requirement, resource_name)<br ALIGN="LEFT"/>resource_filename(package_or_requirement, resource_name)<br ALIGN="LEFT"/>resource_isdir(package_or_requirement, resource_name)<br ALIGN="LEFT"/>resource_listdir(package_or_requirement, resource_name)<br ALIGN="LEFT"/>resource_stream(package_or_requirement, resource_name)<br ALIGN="LEFT"/>resource_string(package_or_requirement, resource_name)<br ALIGN="LEFT"/>set_extraction_path(path)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.tenacity.RetryAction" [color="#44BB99", fontcolor="black", label=<{RetryAction|NAME : str<br ALIGN="LEFT"/>REPR_FIELDS : tuple<br ALIGN="LEFT"/>sleep : float<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.tenacity.RetryCallState" [color="#44BB99", fontcolor="black", label=<{RetryCallState|args : Any<br ALIGN="LEFT"/>attempt_number : int<br ALIGN="LEFT"/>fn : t.Optional[WrappedFn]<br ALIGN="LEFT"/>idle_for : float<br ALIGN="LEFT"/>kwargs : Any<br ALIGN="LEFT"/>next_action : NoneType, Optional[t.Optional[RetryAction]]<br ALIGN="LEFT"/>outcome : NoneType, Optional[t.Optional[Future]]<br ALIGN="LEFT"/>outcome_timestamp : NoneType, Optional[t.Optional[float]]<br ALIGN="LEFT"/>retry_object<br ALIGN="LEFT"/>seconds_since_start<br ALIGN="LEFT"/>start_time<br ALIGN="LEFT"/>|prepare_for_next_attempt(): None<br ALIGN="LEFT"/>set_exception(exc_info: t.Tuple[t.Type[BaseException], BaseException, 'types.TracebackType\| None']): None<br ALIGN="LEFT"/>set_result(val: t.Any): None<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.tenacity.RetryError" [color="#44BB99", fontcolor="red", label=<{RetryError|last_attempt : str<br ALIGN="LEFT"/>|reraise(): 't.NoReturn'<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.tenacity.Retrying" [color="#44BB99", fontcolor="black", label=<{Retrying|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"setuptools._vendor.importlib_metadata.Sectioned" [color="#EEDD88", fontcolor="black", label=<{Sectioned|<br ALIGN="LEFT"/>|read(text, filter_)<br ALIGN="LEFT"/>section_pairs(text)<br ALIGN="LEFT"/>valid(line)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources._vendor.jaraco.text.SeparatedValues" [color="#AAAA00", fontcolor="black", label=<{SeparatedValues|separator : str<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"setuptools._vendor.jaraco.text.SeparatedValues" [color="#EEDD88", fontcolor="black", label=<{SeparatedValues|separator : str<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources._vendor.jaraco.text.Splitter" [color="#AAAA00", fontcolor="black", label=<{Splitter|args : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"setuptools._vendor.jaraco.text.Splitter" [color="#EEDD88", fontcolor="black", label=<{Splitter|args : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources._vendor.jaraco.text.Stripper" [color="#AAAA00", fontcolor="black", label=<{Stripper|lines : map<br ALIGN="LEFT"/>prefix<br ALIGN="LEFT"/>|common_prefix(s1, s2)<br ALIGN="LEFT"/>strip_prefix(lines)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools._vendor.jaraco.text.Stripper" [color="#EEDD88", fontcolor="black", label=<{Stripper|lines : map<br ALIGN="LEFT"/>prefix<br ALIGN="LEFT"/>|common_prefix(s1, s2)<br ALIGN="LEFT"/>strip_prefix(lines)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pygments.filters.SymbolFilter" [color="#44BB99", fontcolor="black", label=<{SymbolFilter|isabelle_symbols : dict<br ALIGN="LEFT"/>lang_map : dict<br ALIGN="LEFT"/>latex_symbols : dict<br ALIGN="LEFT"/>symbols<br ALIGN="LEFT"/>|filter(lexer, stream)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"psutil.tests.TestCase" [color="#FFAABB", fontcolor="black", label=<{TestCase|assertRaisesRegex<br ALIGN="LEFT"/>|<I>runTest</I>()<br ALIGN="LEFT"/>subTest()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"psutil.tests.TestMemoryLeak" [color="#FFAABB", fontcolor="black", label=<{TestMemoryLeak|retries : int<br ALIGN="LEFT"/>times : int<br ALIGN="LEFT"/>tolerance : int<br ALIGN="LEFT"/>verbose : bool<br ALIGN="LEFT"/>warmup_times : int<br ALIGN="LEFT"/>|call(fun)<br ALIGN="LEFT"/>execute(fun, times, warmup_times, retries, tolerance)<br ALIGN="LEFT"/>execute_w_exc(exc, fun)<br ALIGN="LEFT"/>setUpClass()<br ALIGN="LEFT"/>tearDownClass()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"psutil.tests.ThreadTask" [color="#FFAABB", fontcolor="black", label=<{ThreadTask|<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pygments.filters.TokenMergeFilter" [color="#44BB99", fontcolor="black", label=<{TokenMergeFilter|<br ALIGN="LEFT"/>|filter(lexer, stream)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.tenacity.TryAgain" [color="#44BB99", fontcolor="red", label=<{TryAgain|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.UnknownExtra" [color="#44BB99", fontcolor="red", label=<{UnknownExtra|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources.UnknownExtra" [color="#BBCC33", fontcolor="red", label=<{UnknownExtra|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources.extern.VendorImporter" [color="#BBCC33", fontcolor="black", label=<{VendorImporter|root_name<br ALIGN="LEFT"/>search_path<br ALIGN="LEFT"/>vendor_pkg<br ALIGN="LEFT"/>vendored_names : set<br ALIGN="LEFT"/>|create_module(spec)<br ALIGN="LEFT"/><I>exec_module</I>(module)<br ALIGN="LEFT"/>find_spec(fullname, path, target)<br ALIGN="LEFT"/>install()<br ALIGN="LEFT"/>load_module(fullname)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools.extern.VendorImporter" [color="#BBCC33", fontcolor="black", label=<{VendorImporter|root_name<br ALIGN="LEFT"/>search_path<br ALIGN="LEFT"/>vendor_pkg<br ALIGN="LEFT"/>vendored_names : set<br ALIGN="LEFT"/>|create_module(spec)<br ALIGN="LEFT"/><I>exec_module</I>(module)<br ALIGN="LEFT"/>find_spec(fullname, path, target)<br ALIGN="LEFT"/>install()<br ALIGN="LEFT"/>load_module(fullname)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.VersionConflict" [color="#44BB99", fontcolor="red", label=<{VersionConflict|dist<br ALIGN="LEFT"/>req<br ALIGN="LEFT"/>|report()<br ALIGN="LEFT"/>with_context(required_by)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.VersionConflict" [color="#BBCC33", fontcolor="red", label=<{VersionConflict|dist<br ALIGN="LEFT"/>req<br ALIGN="LEFT"/>|report()<br ALIGN="LEFT"/>with_context(required_by)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pygments.filters.VisibleWhitespaceFilter" [color="#44BB99", fontcolor="black", label=<{VisibleWhitespaceFilter|newlines<br ALIGN="LEFT"/>tabs<br ALIGN="LEFT"/>wstt : bool<br ALIGN="LEFT"/>|filter(lexer, stream)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"wheel.cli.WheelError" [color="#EE8866", fontcolor="red", label=<{WheelError|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pkg_resources._vendor.jaraco.text.WordSet" [color="#AAAA00", fontcolor="black", label=<{WordSet|<br ALIGN="LEFT"/>|camel_case()<br ALIGN="LEFT"/>capitalized()<br ALIGN="LEFT"/>dash_separated()<br ALIGN="LEFT"/>from_class_name(subject)<br ALIGN="LEFT"/>headless_camel_case()<br ALIGN="LEFT"/>lowered()<br ALIGN="LEFT"/>parse(identifier)<br ALIGN="LEFT"/>space_separated()<br ALIGN="LEFT"/>trim(item)<br ALIGN="LEFT"/>trim_left(item)<br ALIGN="LEFT"/>trim_right(item)<br ALIGN="LEFT"/>underscore_separated()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"setuptools._vendor.jaraco.text.WordSet" [color="#EEDD88", fontcolor="black", label=<{WordSet|<br ALIGN="LEFT"/>|camel_case()<br ALIGN="LEFT"/>capitalized()<br ALIGN="LEFT"/>dash_separated()<br ALIGN="LEFT"/>from_class_name(subject)<br ALIGN="LEFT"/>headless_camel_case()<br ALIGN="LEFT"/>lowered()<br ALIGN="LEFT"/>parse(identifier)<br ALIGN="LEFT"/>space_separated()<br ALIGN="LEFT"/>trim(item)<br ALIGN="LEFT"/>trim_left(item)<br ALIGN="LEFT"/>trim_right(item)<br ALIGN="LEFT"/>underscore_separated()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.WorkingSet" [color="#44BB99", fontcolor="black", label=<{WorkingSet|by_key : dict<br ALIGN="LEFT"/>callbacks : list<br ALIGN="LEFT"/>entries : list<br ALIGN="LEFT"/>entry_keys : dict<br ALIGN="LEFT"/>normalized_to_canonical_keys : dict<br ALIGN="LEFT"/>|add(dist, entry, insert, replace)<br ALIGN="LEFT"/>add_entry(entry)<br ALIGN="LEFT"/>find(req)<br ALIGN="LEFT"/>find_plugins(plugin_env, full_env, installer, fallback)<br ALIGN="LEFT"/>iter_entry_points(group, name)<br ALIGN="LEFT"/>require()<br ALIGN="LEFT"/>resolve(requirements, env, installer, replace_conflicting, extras)<br ALIGN="LEFT"/>run_script(requires, script_name)<br ALIGN="LEFT"/>subscribe(callback, existing)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.WorkingSet" [color="#BBCC33", fontcolor="black", label=<{WorkingSet|by_key : dict<br ALIGN="LEFT"/>callbacks : list<br ALIGN="LEFT"/>entries : list<br ALIGN="LEFT"/>entry_keys : dict<br ALIGN="LEFT"/>normalized_to_canonical_keys : dict<br ALIGN="LEFT"/>|add(dist, entry, insert, replace)<br ALIGN="LEFT"/>add_entry(entry)<br ALIGN="LEFT"/>find(req)<br ALIGN="LEFT"/>find_plugins(plugin_env, full_env, installer, fallback)<br ALIGN="LEFT"/>iter_entry_points(group, name)<br ALIGN="LEFT"/>require()<br ALIGN="LEFT"/>resolve(requirements, env, installer, replace_conflicting, extras)<br ALIGN="LEFT"/>run_script(requires, script_name)<br ALIGN="LEFT"/>subscribe(callback, existing)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.ZipManifests" [color="#44BB99", fontcolor="black", label=<{ZipManifests|load<br ALIGN="LEFT"/>|build(path)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.ZipManifests" [color="#BBCC33", fontcolor="black", label=<{ZipManifests|load<br ALIGN="LEFT"/>|build(path)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.ZipProvider" [color="#44BB99", fontcolor="black", label=<{ZipProvider|eagers : NoneType<br ALIGN="LEFT"/>zip_pre<br ALIGN="LEFT"/>zipinfo<br ALIGN="LEFT"/>|get_resource_filename(manager, resource_name)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources.ZipProvider" [color="#BBCC33", fontcolor="black", label=<{ZipProvider|eagers : NoneType<br ALIGN="LEFT"/>zip_pre<br ALIGN="LEFT"/>zipinfo<br ALIGN="LEFT"/>|get_resource_filename(manager, resource_name)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pkg_resources._ReqExtras" [color="#44BB99", fontcolor="black", label=<{_ReqExtras|<br ALIGN="LEFT"/>|markers_pass(req, extras)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pkg_resources._ReqExtras" [color="#BBCC33", fontcolor="black", label=<{_ReqExtras|<br ALIGN="LEFT"/>|markers_pass(req, extras)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"_distutils_hack._TrivialRe" [color="#77AADD", fontcolor="black", label=<{_TrivialRe|<br ALIGN="LEFT"/>|match(string)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pygments.formatters._automodule" [color="#44BB99", fontcolor="black", label=<{_automodule|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pygments.lexers._automodule" [color="#44BB99", fontcolor="black", label=<{_automodule|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"psutil.tests.process_namespace" [color="#FFAABB", fontcolor="black", label=<{process_namespace|all<br ALIGN="LEFT"/>getters : list<br ALIGN="LEFT"/>ignored : list<br ALIGN="LEFT"/>killers : list<br ALIGN="LEFT"/>setters : list<br ALIGN="LEFT"/>utils : list<br ALIGN="LEFT"/>|clear_cache()<br ALIGN="LEFT"/>iter(ls, clear_cache)<br ALIGN="LEFT"/>test()<br ALIGN="LEFT"/>test_class_coverage(test_class, ls)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"psutil.tests.retry" [color="#FFAABB", fontcolor="black", label=<{retry|exception : Exception<br ALIGN="LEFT"/>interval : float<br ALIGN="LEFT"/>logfun : NoneType<br ALIGN="LEFT"/>retries : NoneType<br ALIGN="LEFT"/>timeout : NoneType<br ALIGN="LEFT"/>|sleep()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"_distutils_hack.shim" [color="#77AADD", fontcolor="black", label=<{shim|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"setuptools.sic" [color="#BBCC33", fontcolor="black", label=<{sic|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"psutil.tests.system_namespace" [color="#FFAABB", fontcolor="black", label=<{system_namespace|all : list<br ALIGN="LEFT"/>getters : list<br ALIGN="LEFT"/>ignored : list<br ALIGN="LEFT"/>test_class_coverage<br ALIGN="LEFT"/>|iter(ls)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"pip._vendor.pyparsing.version_info" [color="#44BB99", fontcolor="black", label=<{version_info|major : int<br ALIGN="LEFT"/>micro : int<br ALIGN="LEFT"/>minor : int<br ALIGN="LEFT"/>releaselevel : str<br ALIGN="LEFT"/>serial : int<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"pip._vendor.pkg_resources.ContextualVersionConflict" -> "pip._vendor.pkg_resources.VersionConflict" [arrowhead="empty", arrowtail="none"];
"pip._vendor.pkg_resources.DefaultProvider" -> "pip._vendor.pkg_resources.EggProvider" [arrowhead="empty", arrowtail="none"];
"pip._vendor.pkg_resources.DistInfoDistribution" -> "pip._vendor.pkg_resources.Distribution" [arrowhead="empty", arrowtail="none"];
"pip._vendor.pkg_resources.DistributionNotFound" -> "pip._vendor.pkg_resources.ResolutionError" [arrowhead="empty", arrowtail="none"];
"pip._vendor.pkg_resources.EggInfoDistribution" -> "pip._vendor.pkg_resources.Distribution" [arrowhead="empty", arrowtail="none"];
"pip._vendor.pkg_resources.EggMetadata" -> "pip._vendor.pkg_resources.ZipProvider" [arrowhead="empty", arrowtail="none"];
"pip._vendor.pkg_resources.EggProvider" -> "pip._vendor.pkg_resources.NullProvider" [arrowhead="empty", arrowtail="none"];
"pip._vendor.pkg_resources.EmptyProvider" -> "pip._vendor.pkg_resources.NullProvider" [arrowhead="empty", arrowtail="none"];
"pip._vendor.pkg_resources.FileMetadata" -> "pip._vendor.pkg_resources.EmptyProvider" [arrowhead="empty", arrowtail="none"];
"pip._vendor.pkg_resources.IResourceProvider" -> "pip._vendor.pkg_resources.IMetadataProvider" [arrowhead="empty", arrowtail="none"];
"pip._vendor.pkg_resources.MemoizedZipManifests" -> "pip._vendor.pkg_resources.ZipManifests" [arrowhead="empty", arrowtail="none"];
"pip._vendor.pkg_resources.PathMetadata" -> "pip._vendor.pkg_resources.DefaultProvider" [arrowhead="empty", arrowtail="none"];
"pip._vendor.pkg_resources.UnknownExtra" -> "pip._vendor.pkg_resources.ResolutionError" [arrowhead="empty", arrowtail="none"];
"pip._vendor.pkg_resources.VersionConflict" -> "pip._vendor.pkg_resources.ResolutionError" [arrowhead="empty", arrowtail="none"];
"pip._vendor.pkg_resources.ZipProvider" -> "pip._vendor.pkg_resources.EggProvider" [arrowhead="empty", arrowtail="none"];
"pip._vendor.tenacity.RetryAction" -> "pip._vendor.tenacity.BaseAction" [arrowhead="empty", arrowtail="none"];
"pip._vendor.tenacity.Retrying" -> "pip._vendor.tenacity.BaseRetrying" [arrowhead="empty", arrowtail="none"];
"pkg_resources.ContextualVersionConflict" -> "pkg_resources.VersionConflict" [arrowhead="empty", arrowtail="none"];
"pkg_resources.DefaultProvider" -> "pkg_resources.EggProvider" [arrowhead="empty", arrowtail="none"];
"pkg_resources.DistInfoDistribution" -> "pkg_resources.Distribution" [arrowhead="empty", arrowtail="none"];
"pkg_resources.DistributionNotFound" -> "pkg_resources.ResolutionError" [arrowhead="empty", arrowtail="none"];
"pkg_resources.EggInfoDistribution" -> "pkg_resources.Distribution" [arrowhead="empty", arrowtail="none"];
"pkg_resources.EggMetadata" -> "pkg_resources.ZipProvider" [arrowhead="empty", arrowtail="none"];
"pkg_resources.EggProvider" -> "pkg_resources.NullProvider" [arrowhead="empty", arrowtail="none"];
"pkg_resources.EmptyProvider" -> "pkg_resources.NullProvider" [arrowhead="empty", arrowtail="none"];
"pkg_resources.FileMetadata" -> "pkg_resources.EmptyProvider" [arrowhead="empty", arrowtail="none"];
"pkg_resources.IResourceProvider" -> "pkg_resources.IMetadataProvider" [arrowhead="empty", arrowtail="none"];
"pkg_resources.MemoizedZipManifests" -> "pkg_resources.ZipManifests" [arrowhead="empty", arrowtail="none"];
"pkg_resources.PathMetadata" -> "pkg_resources.DefaultProvider" [arrowhead="empty", arrowtail="none"];
"pkg_resources.UnknownExtra" -> "pkg_resources.ResolutionError" [arrowhead="empty", arrowtail="none"];
"pkg_resources.VersionConflict" -> "pkg_resources.ResolutionError" [arrowhead="empty", arrowtail="none"];
"pkg_resources.ZipProvider" -> "pkg_resources.EggProvider" [arrowhead="empty", arrowtail="none"];
"psutil.Popen" -> "psutil.Process" [arrowhead="empty", arrowtail="none"];
"psutil.tests.PsutilTestCase" -> "psutil.tests.TestCase" [arrowhead="empty", arrowtail="none"];
"psutil.tests.TestMemoryLeak" -> "psutil.tests.PsutilTestCase" [arrowhead="empty", arrowtail="none"];
"setuptools._vendor.importlib_metadata.EntryPoint" -> "setuptools._vendor.importlib_metadata.DeprecatedTuple" [arrowhead="empty", arrowtail="none"];
"setuptools._vendor.importlib_metadata.MetadataPathFinder" -> "setuptools._vendor.importlib_metadata.DistributionFinder" [arrowhead="empty", arrowtail="none"];
"setuptools._vendor.importlib_metadata.PathDistribution" -> "setuptools._vendor.importlib_metadata.Distribution" [arrowhead="empty", arrowtail="none"];
"pip._vendor.pkg_resources.EmptyProvider" -> "pip._vendor.pkg_resources.Distribution" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_provider", style="solid"];
"pip._vendor.pkg_resources.MemoizedZipManifests" -> "pip._vendor.pkg_resources.ZipProvider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_zip_manifests", style="solid"];
"pip._vendor.tenacity.Future" -> "pip._vendor.tenacity.RetryCallState" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="outcome", style="solid"];
"pip._vendor.tenacity.Future" -> "pip._vendor.tenacity.RetryCallState" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="outcome", style="solid"];
"pip._vendor.webencodings.Encoding" -> "pip._vendor.webencodings.IncrementalDecoder" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_fallback_encoding", style="solid"];
"pkg_resources.EmptyProvider" -> "pkg_resources.Distribution" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_provider", style="solid"];
"pkg_resources.MemoizedZipManifests" -> "pkg_resources.ZipProvider" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_zip_manifests", style="solid"];
"psutil.Process" -> "psutil.tests.TestMemoryLeak" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_thisproc", style="solid"];
"pip._vendor.pkg_resources.ResourceManager" -> "pip._vendor.pkg_resources.ExtractionError" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="manager", style="solid"];
"pip._vendor.pyparsing.diagram.EditablePartial" -> "pip._vendor.pyparsing.diagram.ElementState" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="converted", style="solid"];
"pip._vendor.pyparsing.diagram.EditablePartial" -> "pip._vendor.pyparsing.diagram.ElementState" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="parent", style="solid"];
"pip._vendor.tenacity.BaseRetrying" -> "pip._vendor.tenacity.RetryCallState" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="retry_object", style="solid"];
"pkg_resources.ResourceManager" -> "pkg_resources.ExtractionError" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="manager", style="solid"];
"setuptools._vendor.importlib_metadata.Distribution" -> "setuptools._vendor.importlib_metadata.PackagePath" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="dist", style="solid"];
}
